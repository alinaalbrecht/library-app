(()=>{let e=document.querySelector("tbody");document.querySelector(".submit-book").addEventListener("click",(function(){let e=document.querySelector("#title").value,d=document.querySelector("#author").value,u=document.querySelector("#pages").value,c="";c="read"===document.querySelector('input[name="read"]:checked').value?r:l;let i=new n;return i.title=e,i.author=d,i.pages=u,i.read=c,t.forEach((e=>e.value="")),function(e){a.push(e),o()}(i),i}));let t=document.querySelectorAll(".input-field");document.querySelector(".remove-all").addEventListener("click",(function(){a=[],o()}));let r="&#10003;",l="&mdash;",a=[];class n{constructor(e,t,r,l){this.title=e,this.author=t,this.pages=r,this.read=l,this.delete="&#10007; remove"}}function o(){let t=[];for(let e=0;e<a.length;e++)t.push(`<tr>\n    <td class="title">${a[e].title}</td>\n    <td class="author">${a[e].author}</td>\n    <td class="pages">${a[e].pages}</td>\n    <td class="read" data-index="${e}">${a[e].read}</td>\n    <td class="delete" data-index="${e}">${a[e].delete}</td>\n    </tr>`);e.innerHTML=t.join(""),document.querySelectorAll(".read").forEach((e=>e.addEventListener("click",d)));let l=document.querySelectorAll(".delete");return l.forEach((e=>e.addEventListener("click",u))),function(){let e=document.querySelector(".tally"),t=0,l=a.length;for(let e=0;e<a.length;e++)a[e].read===r&&t++;e.textContent=l===t?"Great job! You have read all the books in your library!":0===t?"You have not read any books in your library":`You have read ${t} of ${l} books`}(),l}function d(e){let t=e.target.dataset.index;a[t].read===r?a[t].read=l:a[t].read=r,o()}function u(e){let t=parseInt(e.target.dataset.index);a.splice(t,1),o()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saWJyYXJ5LWFwcC8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJib29rTGlzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aXRsZUlucHV0IiwidmFsdWUiLCJhdXRob3JJbnB1dCIsInBhZ2VzSW5wdXQiLCJyZWFkUmFkaW8iLCJyZWFkIiwidW5yZWFkIiwibmV3Qm9vayIsIkJvb2siLCJ0aXRsZSIsImF1dGhvciIsInBhZ2VzIiwiaW5wdXRzIiwiZm9yRWFjaCIsImlucHV0IiwibGlicmFyeSIsInB1c2giLCJkaXNwbGF5TGlicmFyeSIsImFkZEJvb2tUb0xpYnJhcnkiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGhpcyIsImRlbGV0ZSIsImJvb2tMaXN0SXRlbXMiLCJpIiwibGVuZ3RoIiwiaW5uZXJIVE1MIiwiam9pbiIsImljb24iLCJ0b2dnbGVSZWFkIiwiZGVsZXRlQnV0dG9ucyIsImJ1dHRvbiIsImRlbGV0ZUJvb2siLCJ0YWxseSIsInRvdGFsUmVhZCIsInRvdGFsIiwidGV4dENvbnRlbnQiLCJ1cGRhdGVUYWxseSIsImUiLCJpbmRleCIsInRhcmdldCIsImRhdGFzZXQiLCJwYXJzZUludCIsInNwbGljZSJdLCJtYXBwaW5ncyI6Ik1BSUEsSUFBSUEsRUFBV0MsU0FBU0MsY0FBYyxTQUNmRCxTQUFTQyxjQUFjLGdCQUM3QkMsaUJBQWlCLFNBb0JsQyxXQUNFLElBQUlDLEVBQWFILFNBQVNDLGNBQWMsVUFBVUcsTUFDOUNDLEVBQWNMLFNBQVNDLGNBQWMsV0FBV0csTUFDaERFLEVBQWFOLFNBQVNDLGNBQWMsVUFBVUcsTUFFOUNHLEVBQVksR0FFZEEsRUFEa0IsU0FGRlAsU0FBU0MsY0FBYyw4QkFBOEJHLE1BR3pESSxFQUVBQyxFQUVkLElBQUlDLEVBQVUsSUFBSUMsRUFPbEIsT0FOQUQsRUFBUUUsTUFBUVQsRUFDaEJPLEVBQVFHLE9BQVNSLEVBQ2pCSyxFQUFRSSxNQUFRUixFQUNoQkksRUFBUUYsS0FBT0QsRUFDZlEsRUFBT0MsU0FBU0MsR0FBV0EsRUFBTWIsTUFBUSxLQUszQyxTQUEwQk0sR0FDeEJRLEVBQVFDLEtBQUtULEdBQ2JVLElBTkFDLENBQWlCWCxHQUNWQSxLQXJDVCxJQUFJSyxFQUFTZixTQUFTc0IsaUJBQWlCLGdCQUNsQnRCLFNBQVNDLGNBQWMsZUFDN0JDLGlCQUFpQixTQXdHaEMsV0FDRWdCLEVBQVUsR0FDVkUsT0F4R0YsSUFBSVosRUFBTyxXQUNQQyxFQUFTLFVBRVRTLEVBQVUsR0FFZCxNQUFNUCxFQUNKLFlBQVlDLEVBQU9DLEVBQVFDLEVBQU9OLEdBQ2hDZSxLQUFLWCxNQUFRQSxFQUNiVyxLQUFLVixPQUFTQSxFQUNkVSxLQUFLVCxNQUFRQSxFQUNiUyxLQUFLZixLQUFPQSxFQUNaZSxLQUFLQyxPQUFTLG1CQThCbEIsU0FBU0osSUFDUCxJQUFJSyxFQUFnQixHQUNwQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSVIsRUFBUVMsT0FBUUQsSUFDbENELEVBQWNOLEtBQ1osK0JBQ2tCRCxFQUFRUSxHQUFHZCxzQ0FDVk0sRUFBUVEsR0FBR2Isc0NBQ1pLLEVBQVFRLEdBQUdaLGdEQUNBWSxNQUFNUixFQUFRUSxHQUFHbEIsaURBQ2ZrQixNQUFNUixFQUFRUSxHQUFHRiwwQkFLcER6QixFQUFTNkIsVUFBWUgsRUFBY0ksS0FBSyxJQUMzQjdCLFNBQVNzQixpQkFBaUIsU0FDaENOLFNBQVNjLEdBQVNBLEVBQUs1QixpQkFBaUIsUUFBUzZCLEtBRXhELElBQUlDLEVBQWdCaEMsU0FBU3NCLGlCQUFpQixXQUs5QyxPQUpBVSxFQUFjaEIsU0FBU2lCLEdBQ3JCQSxFQUFPL0IsaUJBQWlCLFFBQVNnQyxLQXNCckMsV0FDRSxJQUFJQyxFQUFRbkMsU0FBU0MsY0FBYyxVQUMvQm1DLEVBQVksRUFDWkMsRUFBUW5CLEVBQVFTLE9BQ3BCLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJUixFQUFRUyxPQUFRRCxJQUM5QlIsRUFBUVEsR0FBR2xCLE9BQVNBLEdBQ3RCNEIsSUFJRkQsRUFBTUcsWUFESkQsSUFBVUQsRUFFViwwREFDcUIsSUFBZEEsRUFDVyw4Q0FFQSxpQkFBaUJBLFFBQWdCQyxVQW5DdkRFLEdBQ09QLEVBR1QsU0FBU0QsRUFBV1MsR0FDbEIsSUFBSUMsRUFBUUQsRUFBRUUsT0FBT0MsUUFBUUYsTUFDekJ2QixFQUFRdUIsR0FBT2pDLE9BQVNBLEVBQzFCVSxFQUFRdUIsR0FBT2pDLEtBQU9DLEVBRXRCUyxFQUFRdUIsR0FBT2pDLEtBQU9BLEVBRXhCWSxJQUdGLFNBQVNjLEVBQVdNLEdBQ2xCLElBQUlDLEVBQVFHLFNBQVNKLEVBQUVFLE9BQU9DLFFBQVFGLE9BQ3RDdkIsRUFBUTJCLE9BQU9KLEVBQU8sR0FDdEJyQixNIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpbXBvcnQgXCIuL3N0eWxlLmNzc1wiOyAqL1xuLyogaW1wb3J0IFwiLi9jc3Mvc3R5bGVzLmNzc1wiOyAqL1xuLyogaW1wb3J0IFwiLi9zYXNzL3N0eWxlLnNjc3NcIjsgKi9cblxubGV0IGJvb2tMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRib2R5XCIpO1xubGV0IHN1Ym1pdEJvb2tCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN1Ym1pdC1ib29rXCIpO1xuc3VibWl0Qm9va0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY3JlYXRlTmV3Qm9vayk7XG5sZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pbnB1dC1maWVsZFwiKTtcbmxldCByZW1vdmVBbGxCb29rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVtb3ZlLWFsbFwiKTtcbnJlbW92ZUFsbEJvb2tzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGVhckFsbCk7XG5cbmxldCByZWFkID0gXCImIzEwMDAzO1wiO1xubGV0IHVucmVhZCA9IFwiJm1kYXNoO1wiO1xuXG5sZXQgbGlicmFyeSA9IFtdO1xuXG5jbGFzcyBCb29rIHtcbiAgY29uc3RydWN0b3IodGl0bGUsIGF1dGhvciwgcGFnZXMsIHJlYWQpIHtcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5hdXRob3IgPSBhdXRob3I7XG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xuICAgIHRoaXMucmVhZCA9IHJlYWQ7XG4gICAgdGhpcy5kZWxldGUgPSBcIiYjMTAwMDc7IHJlbW92ZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0Jvb2soKSB7XG4gIGxldCB0aXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aXRsZVwiKS52YWx1ZTtcbiAgbGV0IGF1dGhvcklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdXRob3JcIikudmFsdWU7XG4gIGxldCBwYWdlc0lucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwYWdlc1wiKS52YWx1ZTtcbiAgbGV0IGhhbmRsZVJhZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInJlYWRcIl06Y2hlY2tlZCcpLnZhbHVlO1xuICBsZXQgcmVhZFJhZGlvID0gXCJcIjtcbiAgaWYgKGhhbmRsZVJhZGlvID09PSBcInJlYWRcIikge1xuICAgIHJlYWRSYWRpbyA9IHJlYWQ7XG4gIH0gZWxzZSB7XG4gICAgcmVhZFJhZGlvID0gdW5yZWFkO1xuICB9XG4gIGxldCBuZXdCb29rID0gbmV3IEJvb2soKTtcbiAgbmV3Qm9vay50aXRsZSA9IHRpdGxlSW5wdXQ7XG4gIG5ld0Jvb2suYXV0aG9yID0gYXV0aG9ySW5wdXQ7XG4gIG5ld0Jvb2sucGFnZXMgPSBwYWdlc0lucHV0O1xuICBuZXdCb29rLnJlYWQgPSByZWFkUmFkaW87XG4gIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gKGlucHV0LnZhbHVlID0gXCJcIikpO1xuICBhZGRCb29rVG9MaWJyYXJ5KG5ld0Jvb2spO1xuICByZXR1cm4gbmV3Qm9vaztcbn1cblxuZnVuY3Rpb24gYWRkQm9va1RvTGlicmFyeShuZXdCb29rKSB7XG4gIGxpYnJhcnkucHVzaChuZXdCb29rKTtcbiAgZGlzcGxheUxpYnJhcnkoKTtcbn1cblxuZnVuY3Rpb24gZGlzcGxheUxpYnJhcnkoKSB7XG4gIGxldCBib29rTGlzdEl0ZW1zID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlicmFyeS5sZW5ndGg7IGkrKykge1xuICAgIGJvb2tMaXN0SXRlbXMucHVzaChcbiAgICAgIGA8dHI+XG4gICAgPHRkIGNsYXNzPVwidGl0bGVcIj4ke2xpYnJhcnlbaV0udGl0bGV9PC90ZD5cbiAgICA8dGQgY2xhc3M9XCJhdXRob3JcIj4ke2xpYnJhcnlbaV0uYXV0aG9yfTwvdGQ+XG4gICAgPHRkIGNsYXNzPVwicGFnZXNcIj4ke2xpYnJhcnlbaV0ucGFnZXN9PC90ZD5cbiAgICA8dGQgY2xhc3M9XCJyZWFkXCIgZGF0YS1pbmRleD1cIiR7aX1cIj4ke2xpYnJhcnlbaV0ucmVhZH08L3RkPlxuICAgIDx0ZCBjbGFzcz1cImRlbGV0ZVwiIGRhdGEtaW5kZXg9XCIke2l9XCI+JHtsaWJyYXJ5W2ldLmRlbGV0ZX08L3RkPlxuICAgIDwvdHI+YFxuICAgICk7XG4gIH1cblxuICBib29rTGlzdC5pbm5lckhUTUwgPSBib29rTGlzdEl0ZW1zLmpvaW4oXCJcIik7XG4gIGxldCBpc1JlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlYWRcIik7XG4gIGlzUmVhZC5mb3JFYWNoKChpY29uKSA9PiBpY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVSZWFkKSk7XG5cbiAgbGV0IGRlbGV0ZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRlbGV0ZVwiKTtcbiAgZGVsZXRlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkZWxldGVCb29rKVxuICApO1xuICB1cGRhdGVUYWxseSgpO1xuICByZXR1cm4gZGVsZXRlQnV0dG9ucztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlUmVhZChlKSB7XG4gIGxldCBpbmRleCA9IGUudGFyZ2V0LmRhdGFzZXQuaW5kZXg7XG4gIGlmIChsaWJyYXJ5W2luZGV4XS5yZWFkID09PSByZWFkKSB7XG4gICAgbGlicmFyeVtpbmRleF0ucmVhZCA9IHVucmVhZDtcbiAgfSBlbHNlIHtcbiAgICBsaWJyYXJ5W2luZGV4XS5yZWFkID0gcmVhZDtcbiAgfVxuICBkaXNwbGF5TGlicmFyeSgpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVCb29rKGUpIHtcbiAgbGV0IGluZGV4ID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5pbmRleCk7XG4gIGxpYnJhcnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgZGlzcGxheUxpYnJhcnkoKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGFsbHkoKSB7XG4gIGxldCB0YWxseSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFsbHlcIik7XG4gIGxldCB0b3RhbFJlYWQgPSAwO1xuICBsZXQgdG90YWwgPSBsaWJyYXJ5Lmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaWJyYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxpYnJhcnlbaV0ucmVhZCA9PT0gcmVhZCkge1xuICAgICAgdG90YWxSZWFkKys7XG4gICAgfVxuICB9XG4gIGlmICh0b3RhbCA9PT0gdG90YWxSZWFkKSB7XG4gICAgdGFsbHkudGV4dENvbnRlbnQgPVxuICAgICAgXCJHcmVhdCBqb2IhIFlvdSBoYXZlIHJlYWQgYWxsIHRoZSBib29rcyBpbiB5b3VyIGxpYnJhcnkhXCI7XG4gIH0gZWxzZSBpZiAodG90YWxSZWFkID09PSAwKSB7XG4gICAgdGFsbHkudGV4dENvbnRlbnQgPSBcIllvdSBoYXZlIG5vdCByZWFkIGFueSBib29rcyBpbiB5b3VyIGxpYnJhcnlcIjtcbiAgfSBlbHNlIHtcbiAgICB0YWxseS50ZXh0Q29udGVudCA9IGBZb3UgaGF2ZSByZWFkICR7dG90YWxSZWFkfSBvZiAke3RvdGFsfSBib29rc2A7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYXJBbGwoKSB7XG4gIGxpYnJhcnkgPSBbXTtcbiAgZGlzcGxheUxpYnJhcnkoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=